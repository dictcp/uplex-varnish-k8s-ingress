
import std;
import directors;

probe vk8s_probe_varnish {
	.request = "HEAD /vk8s_cluster_health HTTP/1.1"
	           "Host: vk8s_cluster"
	           "Connection: close";
{{- if .Probe.Timeout}}
	.timeout = {{.Probe.Timeout}};
{{- end}}
{{- if .Probe.Interval}}
	.interval = {{.Probe.Interval}};
{{- end}}
{{- if .Probe.Initial}}
	.initial = {{.Probe.Initial}};
{{- end}}
{{- if .Probe.Window}}
	.window = {{.Probe.Window}};
{{- end}}
{{- if .Probe.Threshold}}
	.threshold = {{.Probe.Threshold}};
{{- end}}
}

{{range $node := .Nodes -}}
backend {{$node.Name}} {
	.host = "{{(index $node.Addresses 0).IP}}";
	.port = "{{(index $node.Addresses 0).Port}}";
	.probe = vk8s_probe_varnish;
}

{{end -}}

acl vk8s_cluster_acl {
{{- range $node := .Nodes}}
	"{{(index $node.Addresses 0).IP}}";
{{- end}}
}

sub vcl_init {
	new vk8s_cluster = directors.shard();
	{{range $node := .Nodes -}}
	vk8s_cluster.add_backend({{$node.Name}});
	{{end -}}
	vk8s_cluster.reconfigure();
}

sub vcl_recv {
	if (remote.ip ~ vk8s_cluster_acl) {
		if (req.http.Host == "vk8s_cluster") {
			if (req.url == "/vk8s_cluster_health") {
				return (synth(200));
			}
			return (synth(404));
		}

		# prevent deadlock for accidental cyclic requests
		set req.hash_ignore_busy = true;

		# if we're async, don't deliver stale
		if (req.http.VK8S-Is-Bgfetch == "true") {
			set req.grace = 0s;
		}

		return (hash);
	}
}

sub vcl_backend_fetch {
	if (bereq.retries == 0 
	    && !bereq.uncacheable
	    && remote.ip !~ vk8s_cluster_acl
	    && "" + vk8s_cluster.backend(resolve=NOW) != server.identity) {
		set bereq.backend = vk8s_cluster.backend(resolve=NOW);
		set bereq.http.VK8S-Is-Bgfetch = bereq.is_bgfetch;
		return (fetch);
	}
}

sub vcl_backend_response {
	if (bereq.backend == vk8s_cluster.backend(resolve=LAZY)) {
	        if (beresp.http.VK8S-Cluster-TTL) {
		        set beresp.ttl = std.duration(
                	    beresp.http.VK8S-Cluster-TTL + "s", 1s);
		        if (beresp.ttl > {{.MaxSecondaryTTL}}) {
			        set beresp.ttl = {{.MaxSecondaryTTL}};
		        }
		        unset beresp.http.VK8S-Cluster-TTL;
	        }
                else {
			set beresp.uncacheable = true;
		}
		return (deliver);
	}
}

sub vcl_backend_error {
	if (bereq.backend == vk8s_cluster.backend(resolve=LAZY)) {
		return (deliver);
	}
}

sub vcl_deliver {
	unset resp.http.VK8S-Cluster-TTL;
	if (remote.ip ~ vk8s_cluster_acl) {
		if (! obj.uncacheable) {
			set resp.http.VK8S-Cluster-TTL = obj.ttl;
		}
		return (deliver);
	}
}
