vcl 4.0;

import std;
import directors;
import re2;

backend vk8s_notfound {
	# 192.0.2.0/24 reserved for docs & examples (RFC5737).
	.host = "192.0.2.255";
	.port = "80";
}

{{- range $name, $svc := .AllServices}}
{{- if $svc.Probe}}
{{with $svc.Probe}}
probe {{probeName $name}} {
{{- if ne .URL ""}}
	.url = "{{.URL}}";
{{- else if .Request}}
	.request =
{{- range $reqLine := .Request}}
		"{{$reqLine}}"
{{- end}}
		;
{{- end}}
{{- if .ExpResponse}}
	.expected_response = {{.ExpResponse}};
{{- end}}
{{- if .Timeout}}
	.timeout = {{.Timeout}};
{{- end}}
{{- if .Interval}}
	.interval = {{.Interval}};
{{- end}}
{{- if .Initial}}
	.initial = {{.Initial}};
{{- end}}
{{- if .Window}}
	.window = {{.Window}};
{{- end}}
{{- if .Threshold}}
	.threshold = {{.Threshold}};
{{- end}}
}
{{- end}}
{{- end}}
{{- end}}

{{range $name, $svc := .AllServices -}}
{{range $addr := $svc.Addresses -}}
backend {{backendName $svc $addr.IP}} {
	.host = "{{$addr.IP}}";
	.port = "{{$addr.Port}}";
{{- with $svc}}
{{- if .HostHeader}}
	.host_header = "{{.HostHeader}}";
{{- end}}
{{- if .ConnectTimeout}}
	.connect_timeout = {{.ConnectTimeout}};
{{- end}}
{{- if .FirstByteTimeout}}
	.first_byte_timeout = {{.FirstByteTimeout}};
{{- end}}
{{- if .BetweenBytesTimeout}}
	.between_bytes_timeout = {{.BetweenBytesTimeout}};
{{- end}}
{{- if .ProxyHeader}}
	.proxy_header = {{.ProxyHeader}};
{{- end}}
{{- if .MaxConnections}}
	.max_connections = {{.MaxConnections}};
{{- end}}
{{- if .Probe}}
	.probe = {{probeName $name}};
{{- end}}
{{- end}}
}
{{end -}}
{{end}}

sub vcl_init {
{{- if .Rules}}
	new vk8s_hosts = re2.set(anchor=both);
	{{- range $rule := .Rules}}
	vk8s_hosts.add("\Q{{$rule.Host}}\E(:\d+)?");
	{{- end}}
	vk8s_hosts.compile();
{{end}}

{{- range $name, $svc := .AllServices}}
	{{- $dirType := dirType $svc}}
	new {{dirName $svc}} = directors.{{$dirType}}();
	{{- range $addr := $svc.Addresses}}
	{{dirName $svc}}.add_backend({{backendName $svc $addr.IP}}
		{{- if eq $dirType "random"}}
		, 1.0
		{{- end}}
		);
	{{- end}}
	{{- if eq $dirType "shard"}}
	{{- if $svc.Director.Warmup}}
	{{dirName $svc}}.set_warmup({{$svc.Director.Warmup}});
	{{- end}}
	{{- if $svc.Director.Rampup}}
	{{dirName $svc}}.set_rampup({{$svc.Director.Rampup}});
	{{- end}}
	{{dirName $svc}}.reconfigure();
	{{- end}}
{{end}}
{{- range $rule := .Rules}}
	new {{urlMatcher $rule}} = re2.set(posix_syntax=true, anchor=start);
	{{- range $path, $svc := $rule.PathMap}}
	{{urlMatcher $rule}}.add("{{$path}}",
				backend={{dirName $svc}}.backend());
	{{- end}}
	{{urlMatcher $rule}}.compile();
{{end -}}
}

sub vk8s_set_backend {
	set req.backend_hint = vk8s_notfound;
{{- if .Rules}}
	if (vk8s_hosts.match(req.http.Host)) {
		if (vk8s_hosts.nmatches() != 1) {
			# Fail fast when the match was not unique.
			return (fail);
		}
		if (0 != 0) {
			#
		}
		{{- range $i, $rule := .Rules}}
		elsif (vk8s_hosts.which() == {{plusOne $i}}) {
			if ({{urlMatcher $rule}}.match(req.url)) {
				set req.backend_hint = {{urlMatcher $rule}}.backend(select=FIRST);
			}
		}
		{{- end}}
	}
{{- end}}

	if (req.backend_hint == vk8s_notfound) {
{{- if .DefaultService.Name}}
		set req.backend_hint = {{dirName .DefaultService}}.backend();
{{- else}}
		return (synth(404));
{{- end}}
	}
}

sub vcl_miss {
	call vk8s_set_backend;
}

sub vcl_pass {
	call vk8s_set_backend;
}

sub vcl_pipe {
	call vk8s_set_backend;
}
