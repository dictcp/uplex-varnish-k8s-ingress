vcl 4.0;

import std;
import directors;
import re2;

backend vk8s_notfound {
	# 192.0.2.0/24 reserved for docs & examples (RFC5737).
	.host = "192.0.2.255";
	.port = "80";
}

{{range $name, $svc := .AllServices -}}
{{range $addr := $svc.Addresses -}}
backend {{backendName $svc $addr.IP}} {
	.host = "{{$addr.IP}}";
	.port = "{{$addr.Port}}";
}
{{end -}}
{{end}}

sub vcl_init {
{{- if .Rules}}
	new vk8s_hosts = re2.set(posix_syntax=true, literal=true, anchor=both);
	{{- range $rule := .Rules}}
	vk8s_hosts.add("{{$rule.Host}}");
	{{- end}}
	vk8s_hosts.compile();
{{end}}

{{- range $name, $svc := .AllServices}}
	new {{dirName $svc}} = directors.round_robin();
	{{- range $addr := $svc.Addresses}}
	{{dirName $svc}}.add_backend({{backendName $svc $addr.IP}});
	{{- end}}
{{end}}
{{- range $rule := .Rules}}
	new {{urlMatcher $rule}} = re2.set(posix_syntax=true, anchor=start);
	{{- range $path, $svc := $rule.PathMap}}
	{{urlMatcher $rule}}.add("{{$path}}",
				backend={{dirName $svc}}.backend());
	{{- end}}
	{{urlMatcher $rule}}.compile();
{{end -}}
}

sub vk8s_set_backend {
	set req.backend_hint = vk8s_notfound;
{{- if .Rules}}
	if (vk8s_hosts.match(req.http.Host)) {
		if (vk8s_hosts.nmatches() != 1) {
			# Fail fast when the match was not unique.
			return (fail);
		}
		if (0 != 0) {
			#
		}
		{{- range $i, $rule := .Rules}}
		elsif (vk8s_hosts.which() == {{plusOne $i}}) {
			if ({{urlMatcher $rule}}.match(req.url)) {
				set req.backend_hint = {{urlMatcher $rule}}.backend(select=FIRST);
			}
		}
		{{- end}}
	}
{{- end}}

	if (req.backend_hint == vk8s_notfound) {
{{- if ne .DefaultService.Name ""}}
		set req.backend_hint = {{dirName .DefaultService}}.backend();
{{- else}}
		return (synth(404));
{{- end}}
	}
}

sub vcl_miss {
	call vk8s_set_backend;
}

sub vcl_pass {
	call vk8s_set_backend;
}
