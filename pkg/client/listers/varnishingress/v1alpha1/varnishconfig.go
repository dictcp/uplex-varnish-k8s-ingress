/*
 * Copyright (c) 2019 UPLEX Nils Goroll Systemoptimierung
 * All rights reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "code.uplex.de/uplex-varnish/k8s-ingress/pkg/apis/varnishingress/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VarnishConfigLister helps list VarnishConfigs.
type VarnishConfigLister interface {
	// List lists all VarnishConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VarnishConfig, err error)
	// VarnishConfigs returns an object that can list and get VarnishConfigs.
	VarnishConfigs(namespace string) VarnishConfigNamespaceLister
	VarnishConfigListerExpansion
}

// varnishConfigLister implements the VarnishConfigLister interface.
type varnishConfigLister struct {
	indexer cache.Indexer
}

// NewVarnishConfigLister returns a new VarnishConfigLister.
func NewVarnishConfigLister(indexer cache.Indexer) VarnishConfigLister {
	return &varnishConfigLister{indexer: indexer}
}

// List lists all VarnishConfigs in the indexer.
func (s *varnishConfigLister) List(selector labels.Selector) (ret []*v1alpha1.VarnishConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VarnishConfig))
	})
	return ret, err
}

// VarnishConfigs returns an object that can list and get VarnishConfigs.
func (s *varnishConfigLister) VarnishConfigs(namespace string) VarnishConfigNamespaceLister {
	return varnishConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VarnishConfigNamespaceLister helps list and get VarnishConfigs.
type VarnishConfigNamespaceLister interface {
	// List lists all VarnishConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VarnishConfig, err error)
	// Get retrieves the VarnishConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VarnishConfig, error)
	VarnishConfigNamespaceListerExpansion
}

// varnishConfigNamespaceLister implements the VarnishConfigNamespaceLister
// interface.
type varnishConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VarnishConfigs in the indexer for a given namespace.
func (s varnishConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VarnishConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VarnishConfig))
	})
	return ret, err
}

// Get retrieves the VarnishConfig from the indexer for a given namespace and name.
func (s varnishConfigNamespaceLister) Get(name string) (*v1alpha1.VarnishConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("varnishconfig"), name)
	}
	return obj.(*v1alpha1.VarnishConfig), nil
}
