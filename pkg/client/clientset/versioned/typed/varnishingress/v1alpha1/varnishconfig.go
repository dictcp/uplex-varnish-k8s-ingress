/*
 * Copyright (c) 2019 UPLEX Nils Goroll Systemoptimierung
 * All rights reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "code.uplex.de/uplex-varnish/k8s-ingress/pkg/apis/varnishingress/v1alpha1"
	scheme "code.uplex.de/uplex-varnish/k8s-ingress/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VarnishConfigsGetter has a method to return a VarnishConfigInterface.
// A group's client should implement this interface.
type VarnishConfigsGetter interface {
	VarnishConfigs(namespace string) VarnishConfigInterface
}

// VarnishConfigInterface has methods to work with VarnishConfig resources.
type VarnishConfigInterface interface {
	Create(*v1alpha1.VarnishConfig) (*v1alpha1.VarnishConfig, error)
	Update(*v1alpha1.VarnishConfig) (*v1alpha1.VarnishConfig, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.VarnishConfig, error)
	List(opts v1.ListOptions) (*v1alpha1.VarnishConfigList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.VarnishConfig, err error)
	VarnishConfigExpansion
}

// varnishConfigs implements VarnishConfigInterface
type varnishConfigs struct {
	client rest.Interface
	ns     string
}

// newVarnishConfigs returns a VarnishConfigs
func newVarnishConfigs(c *IngressV1alpha1Client, namespace string) *varnishConfigs {
	return &varnishConfigs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the varnishConfig, and returns the corresponding varnishConfig object, and an error if there is any.
func (c *varnishConfigs) Get(name string, options v1.GetOptions) (result *v1alpha1.VarnishConfig, err error) {
	result = &v1alpha1.VarnishConfig{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("varnishconfigs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VarnishConfigs that match those selectors.
func (c *varnishConfigs) List(opts v1.ListOptions) (result *v1alpha1.VarnishConfigList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.VarnishConfigList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("varnishconfigs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested varnishConfigs.
func (c *varnishConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("varnishconfigs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a varnishConfig and creates it.  Returns the server's representation of the varnishConfig, and an error, if there is any.
func (c *varnishConfigs) Create(varnishConfig *v1alpha1.VarnishConfig) (result *v1alpha1.VarnishConfig, err error) {
	result = &v1alpha1.VarnishConfig{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("varnishconfigs").
		Body(varnishConfig).
		Do().
		Into(result)
	return
}

// Update takes the representation of a varnishConfig and updates it. Returns the server's representation of the varnishConfig, and an error, if there is any.
func (c *varnishConfigs) Update(varnishConfig *v1alpha1.VarnishConfig) (result *v1alpha1.VarnishConfig, err error) {
	result = &v1alpha1.VarnishConfig{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("varnishconfigs").
		Name(varnishConfig.Name).
		Body(varnishConfig).
		Do().
		Into(result)
	return
}

// Delete takes name of the varnishConfig and deletes it. Returns an error if one occurs.
func (c *varnishConfigs) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("varnishconfigs").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *varnishConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("varnishconfigs").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched varnishConfig.
func (c *varnishConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.VarnishConfig, err error) {
	result = &v1alpha1.VarnishConfig{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("varnishconfigs").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
