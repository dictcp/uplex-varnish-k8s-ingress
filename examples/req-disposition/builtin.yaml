# Configuration for disposition of client requests that re-implements
# vcl_recv in builtin.vcl.

apiVersion: "ingress.varnish-cache.org/v1alpha1"
kind: VarnishConfig
metadata:
  name: builtin-recv-cfg
spec:
  # The services array is required and must have at least one element.
  # Lists the Service names of Varnish services in the same namespace
  # to which this config is to be applied.
  services:
    - varnish-ingress

  # req-disposition configures the disposition of client requests, as
  # an array of objects with the conditions and disposition fields. If
  # all of the conditions for such an object are true for a request,
  # then the request is processed further as specified in the
  # corresponding disposition field. The disposition specifies the
  # next state of request processing, see:
  # https://varnish-cache.org/docs/6.3/reference/states.html
  #
  # The conditions are evaluated in order, and the first set of
  # conditions that evaluate to true invoke the corresponding
  # disposition. If none of the conditions match, the request
  # proceeds to cache lookup -- return(hash) from vcl_recv.
  #
  # This configuration reconstructs vcl_recv from builtin.vcl,
  # see:
  # https://github.com/varnishcache/varnish-cache/blob/6.3/bin/varnishd/builtin.vcl
  req-disposition:

    # If the request method is "PRI", then send a synthetic "405
    # Method Not Allowed" response.
    - conditions:
      - comparand: req.method
        compare: equal
        values:
          - PRI
      disposition:
        action: synth
        status: 405

    # Reject an HTTP/1.1 request with a synthetic "400 Bad Request"
    # response if it doesn't have a Host header.
    - conditions:
      - comparand: req.http.Host
        compare: not-exists
      - comparand: req.esi_level
        count: 0
      - comparand: req.proto
        compare: prefix
        values:
          - HTTP/1.1
        match-flags:
          case-sensitive: false
      disposition:
        action: synth
        status: 400

    # Go to pipe mode for any request whose method is CONNECT, or a
    # non-standard method.
    - conditions:
      - comparand: req.method
        compare: not-equal
        values:
          - GET
          - HEAD
          - PUT
          - POST
          - TRACE
          - OPTIONS
          - DELETE
          - PATCH
      disposition:
        action: pipe

    # Bypass cache lookup if the request method is neither of GET or
    # HEAD.  Note that we only get here if the previous conditions did
    # not evaluate to true, so the method must be one of PUT, POST,
    # TRACE, OPTIONS, DELETE or PATCH.
    - conditions:
      - comparand: req.method
        compare: not-equal
        values:
          - GET
          - HEAD
      disposition:
        action: pass

    # Bypass cache lookup if the request has a Cookie header.
    - conditions:
      - comparand: req.http.Cookie
        compare: exists
      disposition:
        action: pass

    # Bypass cache lookup if the request has an Authorization header;
    # that is, if it is sending credentials for basic or proxy
    # authentication.
    - conditions:
      - comparand: req.http.Authorization
        compare: exists
      disposition:
        action: pass

# If none of the conditions evaluate to true, then the request
# proceeds to cache lookup.
